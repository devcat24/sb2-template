- https://www.hindsightsoftware.com/blog/cucumber-jvm-intellij
- https://www.youtube.com/watch?v=Wc3UDbYO_b4&t=825s
- http://www.baeldung.com/cucumber-scenario-outline
- http://www.baeldung.com/cucumber-rest-api-testing


+. Install IntelliJ plugin - 'Cucumber for Java'

+. Add Maven dependency to pom.xml
		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-java</artifactId>
			<version>2.4.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-junit</artifactId>
			<version>2.4.0</version>
			<scope>test</scope>
		</dependency>

+. Create 'resource' folder under 'src/test' folder


+. Add test '***.feature(scenario)' to 'resource' folder
   -----
	Feature: FizzBuzz Game play

	  Scenario: Play FizzBuzz to get Fizz
		Given Create a FizzBuzz game play
		When I play with number 3
		Then The result is "Fizz"


	  Scenario: Play FizzBuzz to get Buzz
		Given Create a FizzBuzz game play
		When I play with number 5
		Then The result is "Buzz"
   -----

+. IntelliJ - select scenario content -> 'Create step definition'
    > File & File Location: Generated source file detail
	> File Type !!! => should select 'Java'

+. Open auto-generated file & add implement test case (src/test/***/defined-pkg-path)
   -----
	public class FizzBuzzStepdefs {
		FizzBuzz fizzBuzz;
		String result;

		@Given("^Create a FizzBuzz game play$")
		public void createAFizzBuzzGameToGetFizz() throws Throwable {
		   fizzBuzz = new FizzBuzz();
		}
		@When("^I play with number (\\d+)$")
		public void iPlayWithNumber(int num) throws Throwable {
			result = fizzBuzz.play(num);
		}
		@Then("^The result is \"([^\"]*)\"$")
		public void theResultIs(String resultString) throws Throwable {
			org.junit.jupiter.api.Assertions.assertEquals(result, resultString);
		}
	}
   -----

+. Implementation of application (src/java/***/defined-pkg-path)
   -----
	public class FizzBuzz {
		public String play(int num) {
			if (num == 0) throw new IllegalArgumentException("number should not be 0");
			if (isMultipleOf(num, 3) && isMultipleOf(num, 5)) return "FizzBuzz";
			if (isMultipleOf(num, 3)) return "Fizz";
			if (isMultipleOf(num, 5)) return "Buzz";


			return String.valueOf(num);
		}

		private boolean isMultipleOf(int num, int i) {
			return (num % i == 0);
		}
	}
   -----

+. Step-definition file -> select Scenario -> right click -> Run Test

+. Create 'Cucumber test caller interface' for Maven (src/test/***/defined-pkg-path)
   -----
	@RunWith(Cucumber.class)
	@CucumberOptions(features = {"src/test/resource"})
	public class RunCukesTest {
	}
   -----


+. IntelliJ 'Run configuration' example #01 (single scenario)
    Main class: cucumber.api.cli.Main
	Glue: com.github.devcat24.util.testing   (application package)
	Feature or folder path: /opt/dev/workspace_pe/dev-template/src/test/resource/fizzbuzz.feature (feature file)
	Program argument: --plugin org.jetbrains.plugins.cucumber.java.run.CucumberJvm2SMFormatter --monochrome --name "^Play FizzBuzz to get Fizz$"
	       >>> specify scenario

+. IntelliJ 'Run configuration' example #01 (multi-scenario under same feature file)
    Main class: cucumber.api.cli.Main
	Glue: com.github.devcat24.util.testing   (application package)
	Feature or folder path: /opt/dev/workspace_pe/dev-template/src/test/resource/fizzbuzz.feature (feature file)
	Program argument: --plugin org.jetbrains.plugins.cucumber.java.run.CucumberJvm2SMFormatter --monochrome
	       >>> full scenario

