// === Master of OneToMany/ManyToOne/OneToOne relation ===
// The entity which uses '@JoinColumn(name = "**_ID")' has a field (containing opposite table information) -> master (save mapping information to table column)
// The entity which uses 'mappedBy = "**")' -> slave
// 'cascade = CascadeType.ALL' -> should be defined in '@OneToMany' side, as relation information is stored in '@ManyToOne' side (master)

// === orphanRemoval ===
//  -> only for '@OneToMany/@OneToOne' relation - remove orphan slave : be cautious to apply

// === Embeddable composite key ===
// Embedded Key Object
//    > declare class with '@Embeddable' annotation 
// Embedding Object (Main data table)
//    > embed variable using '@EmbeddedId' annotaion


// === Inheritance of Table ===
// 3 strategis are possible -> InheritanceType.SINGLE_TABLE/InheritanceType.JOINED/InheritanceType.TABLE_PER_CLASS


// === Unique value generation ===
// GeneratedValue strategy - GenerationType.AUTO : automatically selects strategy based on the dialect
//    > @GeneratedValue(strategy = GenerationType.AUTO)
// GeneratedValue strategy - GenerationType.IDENTITY : auto-increments database column
//    > @GeneratedValue(strategy = GenerationType.IDENTITY)
// GeneratedValue strategy - GenerationType.SQEUENCE : acquire from database sequence
//    > @SequenceGenerator(name="order_seq_generator", sequenceName = "tb_seq_order", initialValue=10, allocationSize=100)
//    > @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "order_seq_generator")
// GeneratedValue strategy - GenerationType.TABLE : simulates sequence with table
//    > @TableGenerator(name="dev_template_jpa_seq3", initialValue = 1, allocationSize = 100)
//    > @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "dev_template_jpa_seq3")


// === infinite loop in OneToMany/ManyToOne Entity ===
// 1. Lombok annotation
//    > exclude field from '@ToString, @EqualsAndHashCode'
//      (required for only one side of relations but, can exclude in both direction(OneToMany/ManyToOne).
// 2. Jackson configuration (each column definition)
//    > OneToMany Entity : define '@JsonBackReference' annotation
//    > ManyToOne Entity : define '@JsonManagedReference' annotation
// 3. Gson configration (each column definition)
//    > ??? (seems to be working automatically)


// === 'No Session' exception on 'FetchType.LAZY' ===
// 1. Spring JPA use LAZY loading by default, to escape 'No Session' exception
//    > Bind JPA operation with Transaction with '@Transactional(value="fooTransactionManager", propagation = Propagation.REQUIRED)' key word
//    > Put JPA operation on '@Service' classes (Do not put JPA operation itself to '@PostConstruct' things ! -> put it '@Service' & invoke that method)
//    > refer to -> 'JPAService.loadInitalData()'



