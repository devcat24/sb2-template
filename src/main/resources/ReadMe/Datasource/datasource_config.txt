--- for Spring Boot 1.x ---

1. Configuration sample files
  - application.properties : 'Spring Datasource & JPA EntityManager' section
  - FooConfig.java : Primary Datasource
  - BarConfig.java : Secondary Datasource
  - H2Servlet.java : deprecated -> integrated with spring boot configuration in 'application.properties'
  - FooBarConfigTest : JUnit Test for Datasource configuration
  - Emp01Test : JUnit Test using '@DataJpaTest' which performs test using memory db.

2. application.properties
  - 'Spring Datasource & JPA EntityManager' section
  - JMX configuration only works for single datasource with using prefix 'spring.datasource'
     -> for multiple datasources, should be defined manually in 'datasource & entitymanager configuration'

3. FooConfig
  - usually consists 3 parts : datasource config, entity manager config, transaction manager config
  - class definition
     : 'entityManagerFactoryRef / transactionManagerRef / basePackages' shoud be specified
     : 'basePackages' should include both 'JPA Entity Object packages' and 'JPA Repository interface packages'
  - datasource
     : connection properties can be loaded by using prefix (foo.datasource).
     : to load 'Datasource JMXMBean', JMXBean should be manually loaded -> refer to method 'dataSourceMBean'
	 : in multiple datasources environment, '@Qualifier("fooDataSource")' can be utilize to indicate specific datasource
  - entity manager
     : configuration properties(which are in application.properties) cannot be loaded by prefix (foo.datasource)
	 : To create 'EntityManager(LocalContainerEntityManagerFactoryBean)', there are two common ways.
	 : In both ways to transfer 'JPA related parameters' , setting property with 'Properties' or 'HashMap<String, Object>' is required
	 : '@Value("${foo.datasource.jpa.hibernate.dialect}")' can be used to load properties which are defined 'application.properties'
	 : Defining JPA entity packages to scan by spring is required (JPA Repository Interfaces are not included -> defined from 'FooConfig' class declaration)
	 : recommended to specify datasource using '@Qualifier("fooDataSource")' annotation
  - transaction manager
     : need to define 'entity manager' with '@Qualifier("entity manger name")'

4. Testing
  - '@DataJpaTest' is designed for 'ERD/Entity/JPA validation', does not load with '@SpringBootTest'.
  - '@DataJpaTest' supports for rollback after test.
  - '@DataJpaTest' uses in memory database(H2) instead of 'project-configured database' configuration
     and which means '@DataJpaTest' should not be loaded 'ApplicationContext' simultaneously!
