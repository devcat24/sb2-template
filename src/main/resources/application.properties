# https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html


# IDENTITY (ContextIdApplicationContextInitializer) - Application name.
# spring.application.name=SpringBoot2-Dev-Template


# Enable debug logs.
# debug=false
# Enable trace logs.
# trace=false


# ADMIN (SpringApplicationAdminJmxAutoConfiguration)
# Whether to enable admin features for the application.
# spring.application.admin.enabled=false
# JMX name of the application admin MBean.
# spring.application.admin.jmx-name=org.springframework.boot:type=Admin,name=SpringApplication


# server.address=130.217.105.27
server.address=0.0.0.0
server.port=8080


# spring.jmx.default-domain=sb2-jmx

############## FreeMarker Configuration #######################
#  spring.freemarker.cache=false
#  spring.freemarker.charset=UTF-8
#  # Comma-separated list of template paths.
#  spring.freemarker.template-loader-path = classpath:/templates/
#  # spring.freemarker.requestContextAttribute=rc
#  # spring.freemarker.requestContextAttribute ==> for 'context-path' query -> ${rc.contextPath}
############## FreeMarker Configuration #######################


management.endpoint.health.show-details=always
# Enable database health check.
management.health.db.enabled=true
# Enable default health indicators.
management.health.defaults.enabled=true
# Enable disk space health check.
management.health.diskspace.enabled=true


# Spring Boot MVC jsp config
############## JSP Configuration ##############################
spring.mvc.static-path-pattern=/resources/**
spring.mvc.view.prefix=/WEB-INF/view/
spring.mvc.view.suffix=.jsp
# Webjars locator
#    a. add webjar to pom
#    b. invoke with
#         ex. <script src="${pageContext.request.contextPath}/webjars/bootstrap/js/bootstrap.min.js"></script>
#             <script src="${pageContext.request.contextPath}/webjars/bootstrap/3.3.6/js/bootstrap.min.js"></script>
#             <link rel="stylesheet" href="${pageContext.request.contextPath}/webjars/bootstrap/css/bootstrap.min.css">
#             <link rel="stylesheet" href="${pageContext.request.contextPath}/webjars/bootstrap/3.3.6/css/bootstrap.min.css">
spring.resources.chain.strategy.content.enabled=true
spring.resources.chain.strategy.content.paths=/**

############## FreeMarker Configuration #######################
spring.freemarker.cache=false
spring.freemarker.charset=UTF-8
# Comma-separated list of template paths.
spring.freemarker.template-loader-path=classpath:/templates/freemarker
#spring.freemarker.requestContextAttribute=rc
# spring.freemarker.requestContextAttribute ==> for 'context-path' query -> ${rc.contextPath}

############## Thymeleaf Configuration ########################
#spring.thymeleaf.cache=false
#spring.thymeleaf.enabled=true
#spring.thymeleaf.mode=HTML
#spring.thymeleaf.prefix=classpath:/templates/thymeleaf
#spring.thymeleaf.suffix=.html


spring.security.user.name=admin
spring.security.user.password=password

# ### Spring Security Google OAuth2 Configuration
#spring.security.oauth2.client.registration.google.client-id=<your client id>
#spring.security.oauth2.client.registration.google.client-secret=<your client secret>
#spring.security.oauth2.client.registration.facebook.client-id=<your client id>
#spring.security.oauth2.client.registration.facebook.client-secret=<your client secret>




# ### Datasource & JPA configuration (using Spring Boot standard properties) ###
## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
#  spring.datasource.url=jdbc:mysql://localhost:3306/mvc01?useSSL=false
#  spring.datasource.username=root
#  spring.datasource.password=mysql
#  # Hibernate Properties
#  spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
#  # Hibernate ddl auto (create, create-drop, validate, update)
#  spring.jpa.hibernate.ddl-auto=validate


#spring.datasource.url=jdbc:h2:mem:testdb
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=
#spring.h2.console.enabled=false
# Whether to enable the console.
spring.h2.console.enabled=false
# Path at which the console is available.
spring.h2.console.path=/h2-console
# Whether to enable remote access.
spring.h2.console.settings.web-allow-others=false


spring.datasource.type=com.zaxxer.hikari.HikariDataSource
# -> using Tomcat connection pool
# spring.datasource.type=org.apache.tomcat.jdbc.pool.DataSource

spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.connection-timeout=360000
spring.datasource.hikari.connectionTimeout=30000
spring.datasource.hikari.idleTimeout=600000
spring.datasource.hikari.maxLifetime=1800000
spring.datasource.hikari.connection-test-query=SELECT 1
spring.datasource.hikari.pool-name=Hikari-DS-Pool-01
spring.datasource.hikari.registerMbeans=true


# Hibernate Properties
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto=create-drop

spring.jpa.mapping-resources=META-INF/orm_foo.xml,META-INF/orm_foo2.xml

spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql=true
spring.jpa.properties.hibernate.id.new_generator_mappings=false
# do not set 'default_schema' for H2 --> use connection string
# spring.jpa.properties.hibernate.default_schema=sb2-template
spring.jpa.properties.hibernate.search.autoregister_listeners=false
spring.jpa.properties.hibernate.bytecode.use_reflection_optimizer=false

# Enable logging
logging.level.org.hibernate.SQL=DEBUG
# Enable logging for HikariCP to verify that it is used
logging.level.com.zaxxer.hikari.HikariConfig=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
# ### Datasource & JPA configuration (using Spring Boot standard properties) ###




# ### Datasource & JPA configuration (custom Java Config class) ###
#    #
#    # ### fooDatasource config ####
#    # foo.datasource.url=jdbc:h2:file:~/h2/testdb1;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
#    #   -> creates file-based h2 db in '<${user_home}/h2/>'
#    #      invoke to test 'http://localhost:8080/console' & change values 'jdbc:h2:file:~/h2/testdb1' to 'JDBC URL' & Connect
#    # foo.datasource.url=jdbc:log4jdbc:h2:mem:testdb1;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
#    #   -> using log4jdbc
#    #
#    # foo.datasource.hikari.jdbc-url=jdbc:mysql://localhost:3306/mvc01?useSSL=false
#    # foo.datasource.hikari.driver-class-name=com.mysql.jdbc.Driver
#    # foo.datasource.hikari.username=root
#    # foo.datasource.hikari.password=mysql
#    foo.datasource.hikari.jdbc-url=jdbc:h2:mem:foodb;DB_CLOSE_ON_EXIT=FALSE
#    foo.datasource.hikari.driver-class-name=org.h2.Driver
#    foo.datasource.hikari.username=sa
#    foo.datasource.hikari.password=
#
#    foo.datasource.hikari.maximum-pool-size=10
#    foo.datasource.hikari.connection-timeout=360000
#    foo.datasource.hikari.idle-timeout=600000
#    foo.datasource.hikari.max-lifetime=1800000
#    foo.datasource.hikari.connection-test-query=SELECT 1
#    foo.datasource.hikari.pool-name=foo-ds-pool
#    foo.datasource.hikari.jmx-enabled=true
#    foo.datasource.hikari.register-mbeans=true
#    #foo.datasource.hikari.minimum-idle=2
#
#    foo.datasource.hikari.jpa.hibernate.dialect=org.hibernate.dialect.H2Dialect
#    #foo.datasource.hikari.jpa.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
#    foo.datasource.hikari.jpa.hibernate.ddl-auto=create
#    # Never use 'create-drop' or 'create'! Even 'create' will also drop table, if it exists on startup!
#    # -> Use 'validate' !
#    foo.datasource.hikari.jpa.hibernate.show_sql=true
#    foo.datasource.hikari.jpa.hibernate.format_sql=true
#
#
#    #### barDatasource config ####
#    bar.datasource.hikari.jdbc-url=jdbc:h2:mem:bardb;DB_CLOSE_ON_EXIT=FALSE
#    bar.datasource.hikari.driver-class-name=org.h2.Driver
#    bar.datasource.hikari.username=sa
#    bar.datasource.hikari.password=
#
#
#    bar.datasource.hikari.maximum-pool-size=10
#    bar.datasource.hikari.connection-timeout=360000
#    bar.datasource.hikari.idle-timeout=600000
#    bar.datasource.hikari.max-lifetime=1800000
#    bar.datasource.hikari.connection-test-query=SELECT 1
#    bar.datasource.hikari.pool-name=bar-ds-pool
#    bar.datasource.hikari.jmx-enabled=true
#    bar.datasource.hikari.register-mbeans=true
#
#    bar.datasource.hikari.jpa.hibernate.dialect=org.hibernate.dialect.H2Dialect
#    bar.datasource.hikari.jpa.hibernate.ddl-auto=create
#    # Never use 'create-drop' or 'create'! Even 'create' will also drop table, if it exists on startup!
#    # -> Use 'validate' !
#    bar.datasource.hikari.jpa.hibernate.show_sql=true
#    bar.datasource.hikari.jpa.hibernate.format_sql=true
#
#    # Enable the console.
#    spring.h2.console.enabled=true
#    spring.h2.console.path=/h2-console
#    # Path at which the console will be available.
#    spring.h2.console.settings.trace=true
#    # Enable trace output.
#    spring.h2.console.settings.web-allow-others=true
#    # Enable remote access.
# ### Datasource & JPA configuration (custom Java Config class) ###


